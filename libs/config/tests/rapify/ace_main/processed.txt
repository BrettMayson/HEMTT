









    













    
    





    






































    format ['%1: A=%2', MESSAGE, (if (isNil {A}) then [{nil}, {A}])]

    format ['%1: A=%2, B=%3', MESSAGE, (if (isNil {A}) then [{nil}, {A}]), (if (isNil {B}) then [{nil}, {B}])]

    format ['%1: A=%2, B=%3, C=%4', MESSAGE, (if (isNil {A}) then [{nil}, {A}]), (if (isNil {B}) then [{nil}, {B}]), (if (isNil {C}) then [{nil}, {C}])]

    format ['%1: A=%2, B=%3, C=%4, D=%5', MESSAGE, (if (isNil {A}) then [{nil}, {A}]), (if (isNil {B}) then [{nil}, {B}]), (if (isNil {C}) then [{nil}, {C}]), (if (isNil {D}) then [{nil}, {D}])]

    format ['%1: A=%2, B=%3, C=%4, D=%5, E=%6', MESSAGE, (if (isNil {A}) then [{nil}, {A}]), (if (isNil {B}) then [{nil}, {B}]), (if (isNil {C}) then [{nil}, {C}]), (if (isNil {D}) then [{nil}, {D}]), (if (isNil {E}) then [{nil}, {E}])]

    format ['%1: A=%2, B=%3, C=%4, D=%5, E=%6, F=%7', MESSAGE, (if (isNil {A}) then [{nil}, {A}]), (if (isNil {B}) then [{nil}, {B}]), (if (isNil {C}) then [{nil}, {C}]), (if (isNil {D}) then [{nil}, {D}]), (if (isNil {E}) then [{nil}, {E}]), (if (isNil {F}) then [{nil}, {F}])]

    format ['%1: A=%2, B=%3, C=%4, D=%5, E=%6, F=%7, G=%8', MESSAGE, (if (isNil {A}) then [{nil}, {A}]), (if (isNil {B}) then [{nil}, {B}]), (if (isNil {C}) then [{nil}, {C}]), (if (isNil {D}) then [{nil}, {D}]), (if (isNil {E}) then [{nil}, {E}]), (if (isNil {F}) then [{nil}, {F}]), (if (isNil {G}) then [{nil}, {G}])]

    format ['%1: A=%2, B=%3, C=%4, D=%5, E=%6, F=%7, G=%8, H=%9', MESSAGE, (if (isNil {A}) then [{nil}, {A}]), (if (isNil {B}) then [{nil}, {B}]), (if (isNil {C}) then [{nil}, {C}]), (if (isNil {D}) then [{nil}, {D}]), (if (isNil {E}) then [{nil}, {E}]), (if (isNil {F}) then [{nil}, {F}]), (if (isNil {G}) then [{nil}, {G}]), (if (isNil {H}) then [{nil}, {H}])]

    format ['%1: A=%2, B=%3, C=%4, D=%5, E=%6, F=%7, G=%8, H=%9, I=%10', MESSAGE, (if (isNil {A}) then [{nil}, {A}]), (if (isNil {B}) then [{nil}, {B}]), (if (isNil {C}) then [{nil}, {C}]), (if (isNil {D}) then [{nil}, {D}]), (if (isNil {E}) then [{nil}, {E}]), (if (isNil {F}) then [{nil}, {F}]), (if (isNil {G}) then [{nil}, {G}]), (if (isNil {H}) then [{nil}, {H}]), (if (isNil {I}) then [{nil}, {I}])]








                    
























        
    


















    







{     class CBA     {         class Versioning         {             class var1             {             };         };     }; };










        

    
    
    file = "\z\ace\addons\main\fnc_func.sqf";    headerType = 0;    recompile = 0;}


    {     class PreloadAddons     {         class ace_main         {             list[]={ "ace_main" };         };     }; }














    












                
        






    private [#NAME,"_this"];     if (isNil "_this") then { _this = [] };     NAME = _this param [INDEX, DEF_VALUE];     


    private #NAME;     NAME = [toLower KEY, toUpper KEY, DEF_VALUE, (if (isNil {_this}) then [{nil}, {_this}])] call CBA_fnc_getArg;     





    if (not (CONDITION)) then     {         ['ace', 'main', "Assertion failed!", 'Assertion (CONDITION) failed!\n\n' + (MESSAGE), "\script_macros_common.hpp", 1418 + 1] call CBA_fnc_error;     }


    if (CONDITION) then     {         ['ace', 'main', "Assertion failed!", 'Assertion (not (CONDITION)) failed!\n\n' + (MESSAGE), "\script_macros_common.hpp", 1440 + 1] call CBA_fnc_error     }


    if (not ((A) OPERATOR (B))) then     {         ['ace', 'main', "Assertion failed!", 'Assertion (A OPERATOR B) failed!\n' + 'A: ' + (str (A)) + '\n' + 'B: ' + (str (B)) + "\n\n" + (MESSAGE), "\script_macros_common.hpp", 1464 + 1] call CBA_fnc_error;     }


    if (isNil VARIABLE) then     {         ['ace', 'main', "Assertion failed!", 'Assertion (VARIABLE is defined) failed!\n\n' + (MESSAGE), "\script_macros_common.hpp", 1487 + 1] call CBA_fnc_error;     }




    if (CONDITION) then     {         diag_log text format ['[%1] (%2) %3: %4', toUpper 'ace', 'main', "Test OK", format ['%1 %2:%3', '(CONDITION)', "\script_macros_common.hpp", 1516 + 1]];     }     else     {         ['ace', 'main', "Test FAIL", '(CONDITION) ' + (MESSAGE), "\script_macros_common.hpp", 1520 + 1] call CBA_fnc_error;     }


    if (not (CONDITION)) then     {         diag_log text format ['[%1] (%2) %3: %4', toUpper 'ace', 'main', "Test OK", format ['%1 %2:%3', '(not (CONDITION))', "\script_macros_common.hpp", 1543 + 1]];     }     else     {         ['ace', 'main', "Test FAIL", '(not (CONDITION)) ' + (MESSAGE), "\script_macros_common.hpp", 1547 + 1] call CBA_fnc_error;     }


    if ((A) OPERATOR (B)) then     {         diag_log text format ['[%1] (%2) %3: %4', toUpper 'ace', 'main', "Test OK", format ['%1 %2:%3', '(A OPERATOR B)', "\script_macros_common.hpp", 1572 + 1]]     }     else     {         ['ace', 'main', "Test FAIL", '(A OPERATOR B)', "\script_macros_common.hpp", 1576 + 1] call CBA_fnc_error     };


    if (isNil #A) then {         ['ace', 'main', "Test FAIL", '(A is not defined) ' + (MESSAGE), "\script_macros_common.hpp", 1600 + 1] call CBA_fnc_error;     } else {         if (isNil #B) then {             ['ace', 'main', "Test FAIL", '(B is not defined) ' + (MESSAGE), "\script_macros_common.hpp", 1603 + 1] call CBA_fnc_error;         } else {             if ((A) OPERATOR (B)) then {                 diag_log text format ['[%1] (%2) %3: %4', toUpper 'ace', 'main', "Test OK", format ['%1 %2:%3', '(A OPERATOR B) ' + (MESSAGE), "\script_macros_common.hpp", 1606 + 1]]             } else {                 ['ace', 'main', "Test FAIL", '(A OPERATOR B) ' + (MESSAGE), "\script_macros_common.hpp", 1608 + 1] call CBA_fnc_error     }; }; };



    if (not isNil VARIABLE) then     {         diag_log text format ['[%1] (%2) %3: %4', toUpper 'ace', 'main', "Test OK", format ['%1 %2:%3', '(' + VARIABLE + ' is defined)', "\script_macros_common.hpp", 1632 + 1]];     }     else     {         ['ace', 'main', "Test FAIL", '(' + VARIABLE + ' is not defined)' + (MESSAGE), "\script_macros_common.hpp", 1636 + 1] call CBA_fnc_error;     }




    OLD_FUNCTION = {         diag_log text format ['[%1] (%2) %3: %4', toUpper 'ace', 'main', 'WARNING', 'Deprecated function used: OLD_FUNCTION (new: NEW_FUNCTION) in ace_main'];         if (isNil "_this") then { call NEW_FUNCTION } else { _this call NEW_FUNCTION };     }


    

    OLD_FUNCTION = {         diag_log text format ['[%1] (%2) %3: %4', toUpper 'ace', 'main', 'WARNING', 'Obsolete function used: (use: OLD_FUNCTION) in ace_main'];         if (isNil "_this") then { call COMMAND_CODE } else { _this call COMMAND_CODE };     }


    
        units[] = {};         weapons[] = {};         requiredVersion = 2.10;         requiredAddons[] = {};         version = 3.15; }

















fired = "call cba_xeh_fnc_fired"; animChanged = "call cba_xeh_fnc_animChanged"; animDone = "call cba_xeh_fnc_animDone"; animStateChanged = "call cba_xeh_fnc_animStateChanged"; containerClosed = "call cba_xeh_fnc_containerClosed"; containerOpened = "call cba_xeh_fnc_containerOpened"; controlsShifted = "call cba_xeh_fnc_controlsShifted"; dammaged = "call cba_xeh_fnc_dammaged"; engine = "call cba_xeh_fnc_engine"; epeContact = "call cba_xeh_fnc_epeContact"; epeContactEnd = "call cba_xeh_fnc_epeContactEnd"; epeContactStart = "call cba_xeh_fnc_epeContactStart"; explosion = "call cba_xeh_fnc_explosion"; firedNear = "call cba_xeh_fnc_firedNear"; fuel = "call cba_xeh_fnc_cba_xeh_fuel"; gear = "call cba_xeh_fnc_gear"; getIn = "call cba_xeh_fnc_getIn"; getInMan = "call cba_xeh_fnc_getInMan"; getOut = "call cba_xeh_fnc_getOut"; getOutMan = "call cba_xeh_fnc_getOutMan"; handleHeal = "call cba_xeh_fnc_handleHeal"; hit = "call cba_xeh_fnc_hit"; hitPart = "call cba_xeh_fnc_hitPart"; incomingMissile = "call cba_xeh_fnc_incomingMissile"; inventoryClosed = "call cba_xeh_fnc_inventoryClosed"; inventoryOpened = "call cba_xeh_fnc_inventoryOpened"; killed = "call cba_xeh_fnc_killed"; landedTouchDown = "call cba_xeh_fnc_landedTouchDown"; landedStopped = "call cba_xeh_fnc_landedStopped"; local = "call cba_xeh_fnc_local"; respawn = "call cba_xeh_fnc_respawn"; put = "call cba_xeh_fnc_put"; take = "call cba_xeh_fnc_take"; seatSwitched = "call cba_xeh_fnc_seatSwitched"; seatSwitchedMan = "call cba_xeh_fnc_seatSwitchedMan"; soundPlayed = "call cba_xeh_fnc_soundPlayed"; weaponAssembled = "call cba_xeh_fnc_weaponAssembled"; weaponDisassembled = "call cba_xeh_fnc_weaponDisassembled"; weaponDeployed = "call cba_xeh_fnc_weaponDeployed"; weaponRested = "call cba_xeh_fnc_weaponRested"; reloaded = "call cba_xeh_fnc_reloaded"; firedMan = "call cba_xeh_fnc_firedMan"; turnIn = "call cba_xeh_fnc_turnIn"; turnOut = "call cba_xeh_fnc_turnOut"; deleted = "call cba_xeh_fnc_deleted"; disassembled = "call cba_xeh_fnc_disassembled"; Suppressed = "call cba_xeh_fnc_Suppressed"; gestureChanged = "call cba_xeh_fnc_gestureChanged"; gestureDone = "call cba_xeh_fnc_gestureDone";



fired = ""; animChanged = ""; animDone = ""; animStateChanged = ""; containerClosed = ""; containerOpened = ""; controlsShifted = ""; dammaged = ""; engine = ""; epeContact = ""; epeContactEnd = ""; epeContactStart = ""; explosion = ""; firedNear = ""; fuel = ""; gear = ""; getIn = ""; getInMan = ""; getOut = ""; getOutMan = ""; handleHeal = ""; hit = ""; hitPart = ""; incomingMissile = ""; inventoryClosed = ""; inventoryOpened = ""; killed = ""; landedTouchDown = ""; landedStopped = ""; local = ""; respawn = ""; put = ""; take = ""; seatSwitched = ""; seatSwitchedMan = ""; soundPlayed = ""; weaponAssembled = ""; weaponDisassembled = ""; weaponDeployed = ""; weaponRested = ""; reloaded = ""; firedMan = ""; turnIn = ""; turnOut = ""; deleted = ""; disassembled = ""; Suppressed = ""; gestureChanged = ""; gestureDone = ""













    weapon = #WEAPON;     count = COUNT; }

    name = #ITEM;     count = COUNT; }

    magazine = #MAGAZINE;     count = COUNT; }

    backpack = #BACKPACK;     count = COUNT; }






        




    format ['%1: A=%2, B=%3, C=%4, D=%5, E=%6, F=%7, G=%8, H=%9, I=%10 J=%11', MESSAGE, (if (isNil {A}) then [{nil}, {A}]), (if (isNil {B}) then [{nil}, {B}]), (if (isNil {C}) then [{nil}, {C}]), (if (isNil {D}) then [{nil}, {D}]), (if (isNil {E}) then [{nil}, {E}]), (if (isNil {F}) then [{nil}, {F}]), (if (isNil {G}) then [{nil}, {G}]), (if (isNil {H}) then [{nil}, {H}]), (if (isNil {I}) then [{nil}, {I}]), (if (isNil {J}) then [{nil}, {J}])]
   










            






            






                
class CfgPatches {
    class ace_main {
        name = "ACE3 - main";
        units[] = {};
        weapons[] = {};
        requiredVersion = 2.10;
        requiredAddons[] = {"cba_main"};
        author = "$STR_ace_common_ACETeam";
        url = "$STR_ace_main_URL";
        version = 3.15; versionStr = "3.15.2.69"; versionAr[] = {3,15,2,69};
    };

    class acex_main: ace_main { 
        units[] = {};
        weapons[] = {};
    };
};

class CfgMods {
    class ace {
        dir = "@ace";
        name = "Advanced Combat Environment 3";
        picture = "A3\Ui_f\data\Logos\arma3_expansion_alpha_ca";
        hidePicture = "true";
        hideName = "true";
        actionName = "Website";
        action = "$STR_ace_main_URL";
        description = "Issue Tracker: https://github.com/acemod/ACE3/issues";
    };
};


class CfgSettings {
    class CBA {
        class Versioning {
            class ACE {
                class dependencies {
                    
                    CBA[] = {"cba_main", {3,15,7}, "(true)"};

                    
                    compat_rhs_afrf3[] = {"ace_compat_rhs_afrf3", {3,15,2,69}, "isClass (configFile >> 'CfgPatches' >> 'rhs_main')"};
                    compat_rhs_usf3[] = {"ace_compat_rhs_usf3", {3,15,2,69}, "isClass (configFile >> 'CfgPatches' >> 'rhsusf_main')"};
                    compat_rhs_gref3[] = {"ace_compat_rhs_gref3", {3,15,2,69}, "isClass (configFile >> 'CfgPatches' >> 'rhsgref_main')"};
                    compat_rhs_saf3[] = {"ace_compat_rhs_saf3", {3,15,2,69}, "isClass (configFile >> 'CfgPatches' >> 'rhssaf_main')"};

                    
                    ace_compat_sog[] = {"ace_compat_sog", {3,15,2,69}, "isClass (configFile >> 'CfgPatches' >> 'data_f_vietnam')"};
                    ace_compat_gm[] = {"ace_compat_gm", {3,15,2,69}, "isClass (configFile >> 'CfgPatches' >> 'gm_core')"};
                };
            };
        };
    };
};
class CfgFactionClasses {
    class NO_CATEGORY;
    class ACE: NO_CATEGORY {
        displayName = "ACE";
        priority = 2;
        side = 7;
    };
    class ACE_Logistics: ACE {
        displayName = "$STR_ace_main_Category_Logistics";
    };
};
class CfgVehicleClasses {
    class ACE_Logistics_Items {
        displayName = "$STR_ace_main_Category_Logistics";
    };
};
class CfgEditorSubcategories {
    class ace_main_subcategory {
        displayName = "$STR_ace_main_Category_Logistics";
    };
};
