use std::{collections::HashMap, sync::Arc};

use hemtt_workspace::{
    position::Position,
    reporting::{Symbol, Token},
    WorkspacePath,
};
use strsim::levenshtein;

use crate::definition::Definition;

#[derive(Clone, PartialEq, Eq, Hash, Debug)]
pub enum DefineSource {
    Source(Vec<WorkspacePath>),
    Generated,
    Argument,
}

type InnerDefines = HashMap<Arc<str>, (Arc<Token>, Definition, DefineSource)>;

#[derive(Clone, Default)]
/// `HashMap` of all current defines
pub struct Defines {
    global: InnerDefines,
    stack: Vec<(Arc<str>, InnerDefines)>,
    counter: u16,
}

/// Built-in macros that HEMTT supports, constants
const BUILTIN_CONST: [(&str, u8); 2] = [("__ARMA__", 1), ("__ARMA3__", 1)];

/// Built-in macros that HEMTT supports, generated by the preprocessor
const BUILTIN_GEN: [&str; 6] = [
    "__COUNTER__",
    "__COUNTER_RESET__",
    "__FILE__",
    "__FILE_NAME__",
    "__FILE_SHORT__",
    "__LINE__",
];

/// Built-in macros that HEMTT supports, special cases
const BUILTIN_SPECIAL: [&str; 1] = ["__EVAL"];

/// Built-in macros that HEMTT intentionally does not support
const BUILTIN_PROTEST: [&str; 18] = [
    "__DATE_ARR__",
    "__DATE_STR__",
    "__DATE_STR_ISO8601__",
    "__TIME__",
    "__TIME_UTC__",
    "__TIMESTAMP_UTC__",
    "__DAY__",
    "__MONTH__",
    "__YEAR__",
    "__RAND_INT*__",
    "__RAND_UINT*__",
    "__GAME_VER__",
    "__GAME_VER_MAJ__",
    "__GAME_VER_MIN__",
    "__GAME_BUILD__",
    "__A3_DIAG__",
    "__A3_DEBUG__",
    "__EXEC",
];

impl Defines {
    pub fn is_builtin(key: &str) -> bool {
        BUILTIN_GEN.contains(&key)
            || BUILTIN_SPECIAL.contains(&key)
            || BUILTIN_PROTEST.contains(&key)
            || BUILTIN_CONST.iter().any(|(k, _)| *k == key)
    }

    pub fn is_unsupported_builtin(key: &str) -> bool {
        BUILTIN_PROTEST.contains(&key)
    }

    pub fn contains_key(&self, key: &str) -> bool {
        if BUILTIN_GEN.contains(&key) {
            return true;
        }
        if let Some(last) = self.stack.last() {
            if *last.0 == *key {
                return false;
            }
            if last.1.contains_key(key) {
                return true;
            }
        }
        self.global.contains_key(key)
    }

    #[allow(clippy::too_many_lines)]
    pub fn get_with_gen(
        &mut self,
        key: &Arc<Token>,
        site: Option<&Position>,
    ) -> Option<(Arc<Token>, Definition, DefineSource)> {
        let ident = key.to_string();
        if let Some(site) = site {
            if BUILTIN_GEN.contains(&ident.as_str()) {
                match ident.as_str() {
                    "__COUNTER__" => {
                        let counter = self.counter;
                        self.counter += 1;
                        return Some((
                            key.clone(),
                            Definition::Value(vec![Arc::new(Token::new(
                                Symbol::Digit(counter.into()),
                                key.position().clone(),
                            ))]),
                            DefineSource::Generated,
                        ));
                    }
                    "__COUNTER_RESET__" => {
                        self.counter = 0;
                        return Some((key.clone(), Definition::Void, DefineSource::Generated));
                    }
                    "__FILE__" => {
                        let path = site.path().as_str().replace('/', "\\");
                        return Some((
                            key.clone(),
                            Definition::Value(vec![
                                Arc::new(Token::new(Symbol::DoubleQuote, key.position().clone())),
                                Arc::new(site.path().workspace().project().map_or_else(
                                    || {
                                        Token::new(
                                            Symbol::Word(path.clone()),
                                            key.position().clone(),
                                        )
                                    },
                                    |project| {
                                        Token::new(
                                            project.mainprefix().map_or_else(
                                                || {
                                                    Symbol::Word(format!(
                                                        "{}{}",
                                                        project.prefix(),
                                                        path,
                                                    ))
                                                },
                                                |mainprefix| {
                                                    Symbol::Word(format!(
                                                        "{}\\{}{}",
                                                        mainprefix,
                                                        project.prefix(),
                                                        path,
                                                    ))
                                                },
                                            ),
                                            key.position().clone(),
                                        )
                                    },
                                )),
                                Arc::new(Token::new(Symbol::DoubleQuote, key.position().clone())),
                            ]),
                            DefineSource::Generated,
                        ));
                    }
                    "__FILE_NAME__" => {
                        let path = site.path().filename();
                        return Some((
                            key.clone(),
                            Definition::Value(vec![Arc::new(Token::new(
                                Symbol::Word(path),
                                key.position().clone(),
                            ))]),
                            DefineSource::Generated,
                        ));
                    }
                    "__FILE_SHORT__" => {
                        // drop the last extension, `test.inc.sqf` -> `test.inc`
                        let path = site.path().filename();
                        let path = path
                            .chars()
                            .rev()
                            .skip_while(|c| *c != '.')
                            .skip(1)
                            .collect::<Vec<_>>()
                            .iter()
                            .rev()
                            .collect::<String>();
                        return Some((
                            key.clone(),
                            Definition::Value(vec![Arc::new(Token::new(
                                Symbol::Word(path),
                                key.position().clone(),
                            ))]),
                            DefineSource::Generated,
                        ));
                    }
                    "__LINE__" => {
                        return Some((
                            key.clone(),
                            Definition::Value(vec![Arc::new(Token::new(
                                Symbol::Digit(site.start().1 .0),
                                key.position().clone(),
                            ))]),
                            DefineSource::Generated,
                        ));
                    }
                    _ => unreachable!(),
                }
            }
        }
        let ret = self.get_readonly(&ident);
        if let Some((_, Definition::Function(body), _)) = &ret {
            if key.position().path() != body.position().path() {
                return ret;
            }
            // starts before the definition
            if key.position().start().1 .0 < body.position().start().1 .0 {
                return ret;
            }
            // starts after the definition
            if key.position().start().1 .0 > body.position().end().1 .0 {
                return ret;
            }
            // the usage is within the definition, so we can't use it
            return None;
        }
        ret
    }

    pub fn get_readonly(&self, key: &str) -> Option<(Arc<Token>, Definition, DefineSource)> {
        self.stack
            .last()
            .as_ref()
            .and_then(|i| i.1.get(key))
            .or_else(|| self.global.get(key))
            .cloned()
    }

    #[cfg(test)]
    pub fn get_test(&self, key: &str) -> Option<&(Arc<Token>, Definition, DefineSource)> {
        self.stack
            .last()
            .as_ref()
            .and_then(|i| i.1.get(key))
            .or_else(|| self.global.get(key))
    }

    pub fn insert(
        &mut self,
        key: &str,
        value: (Arc<Token>, Definition, DefineSource),
    ) -> Option<(Arc<Token>, Definition, DefineSource)> {
        if let Some(stack) = self.stack.last_mut() {
            stack.1.insert(Arc::from(key), value)
        } else {
            self.global.insert(Arc::from(key), value)
        }
    }

    pub fn remove(&mut self, key: &str) -> Option<(Arc<Token>, Definition, DefineSource)> {
        if let Some(scope) = self.stack.last_mut() {
            scope.1.remove(key)
        } else {
            self.global.remove(key)
        }
    }

    pub fn push(&mut self, name: &str, args: InnerDefines) {
        self.stack.push((Arc::from(name), args));
    }

    pub fn pop(&mut self) {
        self.stack.pop();
    }

    pub const fn stack(&self) -> &Vec<(Arc<str>, InnerDefines)> {
        &self.stack
    }

    pub const fn global(&self) -> &InnerDefines {
        &self.global
    }

    pub fn similar_function(&self, search: &str, args: Option<usize>) -> Vec<&Arc<str>> {
        let mut similar = self
            .global
            .iter()
            .filter(|(_, (_, def, _))| {
                let Definition::Function(func) = def else {
                    return false;
                };
                args.map_or(true, |args| func.args().len() == args)
            })
            .map(|(name, _)| (name, levenshtein(name, search)))
            .collect::<Vec<_>>();
        similar.sort_by_key(|(_, v)| *v);
        similar.retain(|s| s.1 <= 3);
        similar.truncate(3);
        similar.into_iter().map(|(n, _)| n).collect::<Vec<_>>()
    }

    pub fn similar_values(&self, search: &str) -> Vec<&Arc<str>> {
        let mut similar = self
            .global
            .iter()
            .filter(|(_, (_, def, _))| {
                let Definition::Value(_) = def else {
                    return false;
                };
                true
            })
            .map(|(name, _)| (name, levenshtein(name, search)))
            .collect::<Vec<_>>();
        similar.sort_by_key(|(_, v)| *v);
        similar.retain(|s| s.1 <= 3);
        similar.truncate(3);
        similar.into_iter().map(|(n, _)| n).collect::<Vec<_>>()
    }
}
